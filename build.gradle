/*
 * Copyright 2022 Thoughtworks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: "https://raw.githubusercontent.com/gocd/gocd-plugin-gradle-task-helpers/master/helper.gradle?_=${(int) (new Date().toInstant().epochSecond / 60)}"
apply plugin: 'java'

group = 'com.thoughtworks.gocd'

gocdPlugin {
  id = 'com.thoughtworks.gocd.elastic-agent.ecs'
  pluginVersion = '9.0.0'
  goCdVersion = '22.1.0'
  name = 'GoCD Elastic Agent Plugin for Amazon ECS'
  description = 'GoCD Elastic Agent Plugin for Amazon Elastic Container Service allow for more efficient use of instances'
  vendorName = 'Thoughtworks, Inc.'
  vendorUrl = 'https://github.com/gocd/gocd-ecs-elastic-agent'

  githubRepo {
    owner = System.getenv('GITHUB_USER') ?: 'bob'
    repo = 'gocd-ecs-elastic-agent'
    token = System.getenv('GITHUB_TOKEN') ?: 'bad-token'
  }

  pluginProject = project

  prerelease = !"No".equalsIgnoreCase(System.getenv('PRERELEASE'))
  assetsToRelease = [project.tasks.findByName('jar')]
}

version = gocdPlugin.fullVersion(project)

repositories {
  mavenCentral()
  mavenLocal()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile).configureEach {
    options.release = 17
}

ext {
  deps = [
    gocdPluginApi: 'cd.go.plugin:go-plugin-api:25.3.0',
    awsSdk       : 'com.amazonaws:aws-java-sdk:1.12.791',
    lombok       : 'org.projectlombok:lombok:1.18.42',
  ]

  versions = project.ext.deps.collectEntries { lib, libGav -> [lib, libGav.split(':').last()] }
}

dependencies {
  annotationProcessor project.deps.lombok

  compileOnly project.deps.lombok
  compileOnly project.deps.gocdPluginApi

  implementation 'com.google.code.gson:gson:2.13.2'
  implementation('com.google.guava:guava:33.5.0-jre') {
    // see https://github.com/google/guava/pull/6606
    exclude(module: 'listenablefuture')
    exclude(module: 'jspecify')
    exclude(module: 'error_prone_annotations')
    exclude(module: 'j2objc-annotations')
  }
  implementation 'org.apache.commons:commons-lang3:3.19.0'
  implementation 'joda-time:joda-time:2.14.0'
  implementation 'org.apache.commons:commons-collections4:4.5.0'

  implementation "com.amazonaws:aws-java-sdk-ecs:${project.versions.awsSdk}"
  implementation "com.amazonaws:aws-java-sdk-ec2:${project.versions.awsSdk}"
  implementation 'org.freemarker:freemarker:2.3.34'

  modules {
    module('commons-logging:commons-logging') {
      replacedBy('org.slf4j:jcl-over-slf4j', "Everything should go via SLF4J")
    }
  }
  implementation 'org.slf4j:jcl-over-slf4j:2.0.17'

  testImplementation platform('org.junit:junit-bom:6.0.0')
  testImplementation 'org.junit.jupiter:junit-jupiter-api'
  testImplementation 'org.junit.jupiter:junit-jupiter-params'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

  testImplementation project.deps.gocdPluginApi
  testImplementation 'uk.org.webcompere:system-stubs-jupiter:2.1.8'
  testImplementation 'org.assertj:assertj-core:3.27.6'
  testImplementation 'org.mockito:mockito-core:5.20.0'
  testImplementation 'org.skyscreamer:jsonassert:1.5.3'
  testImplementation 'org.jsoup:jsoup:1.21.2'
}

tasks.withType(JavaCompile).configureEach {
  options.deprecation = true
  options.encoding = 'utf-8'
  options.warnings = true
  options.compilerArgs << "-Xlint:all"
  options.compilerArgs << "-Xlint:-serial"
}

test {
  useJUnitPlatform()
}

jar {
  from(configurations.runtimeClasspath) {
    into "lib/"
  }
}

interface InjectedExecOps {
  @Inject
  ExecOperations getExecOps()
}

task bundleInstall {
  inputs.files(project.files('contrib/cloudformation-template/Gemfile', 'contrib/cloudformation-template/Gemfile.lock'))
  outputs.dir(project.file('.bundle'))

  def injected = project.objects.newInstance(InjectedExecOps)
  doLast {
    injected.execOps.exec {
      commandLine = ['bundle']
      workingDir = project.file('contrib/cloudformation-template')
      standardOutput = System.out
      errorOutput = System.err
    }
  }
}

task stackfile {
  dependsOn bundleInstall

  inputs.file(project.file('contrib/cloudformation-template/ecs_cloud_formation_template.rb'))
  outputs.file(project.file("${project.buildDir}/ecs_cloud_formation_template.json"))

  def injected = project.objects.newInstance(InjectedExecOps)
  doLast {
    injected.execOps.exec {
      commandLine = ['bundle', 'exec', 'ruby', 'ecs_cloud_formation_template.rb', 'expand']
      workingDir = project.file('contrib/cloudformation-template')
      standardOutput = new FileOutputStream(project.file("${project.buildDir}/ecs_cloud_formation_template.json"))
      errorOutput = System.err
    }
  }
}
